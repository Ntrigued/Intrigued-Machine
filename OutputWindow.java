package theintriguedproject;

import java.awt.Font;

/* REMEMBERTODO
erase main method if it isn't necessary
*/

import javax.swing.JFrame;;

//Implements the output window where are all PRINTTO, READ, etc. commands are output
//screen is represented by a two-dimensional char array, each dimension containiing 50 elements which are initially set to the space character
// Each of the first-dimension arrays will fill consecutive lines with each of their 50 second-dimension chars displayed one after another, forming a 50X50 bit screen which can print one char per bit
// Characters which are larger than one letter or would otherwise distort that screen will be not be among the available outputs.
public class OutputWindow extends JFrame {

    javax.swing.JTextArea jTextArea1;
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    public void initComponents() {

        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);

//        jTextArea1.setColumns(5);
 //       jTextArea1.setRows(5);
        jTextArea1.setFont(new Font("monospaced", Font.PLAIN, 12));
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 711, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(288, 288, 288)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    // </editor-fold>                        

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException e) {
            //java.util.logging.Logger.getLogger(CodeCenter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException x) {
            //java.util.logging.Logger.getLogger(CodeCenter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException f) {
            //java.util.logging.Logger.getLogger(CodeCenter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            //java.util.logging.Logger.getLogger(CodeCenter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

    }    
    //Create two-dimensional char array to represent the output screen
    char[][] outputLines = new char[50][50];
    
    //Constructor sets all bits to the space character
    public OutputWindow() {
        initComponents();
        setVisible(true);
        for(int x = 0; x<50; x++){
           for(int y = 0; y<50; y++) {
               outputLines[x][y] = ' ';
            }
        }

    }

    //Will take the # passed to PRINTO, and output it's corresponding char value
    //Prints '!' if no code is found
    //Only numbers and letters currently added to code (0-35)
    public char codeList(int num) {
      switch(num) {
          case 0:
              return '0';          
          case 1:
              return '1';
          case 2:
              return '2';
          case 3:
              return '3';
          case 4:
              return '4';
          case 5:
              return '5';
          case 6:
              return '6';
          case 7:
              return '6';
          case 8:
              return '8';
          case 9:
              return '9';
          case 10:
              return 'a';
          case 11:
              return 'b';
          case 12:
              return 'c';
          case 13:
              return 'd';
          case 14:
              return 'e';
          case 15:
              return 'f';
          case 16:
              return 'g';
          case 17:
              return 'h';
          case 18:
              return 'i';
          case 19:
              return 'j';
          case 20:
              return 'k';
          case 21:
              return 'l';
          case 22:
              return 'm';
          case 23:
              return 'n';
          case 24:
              return 'o';
          case 25:
              return 'p';
          case 26:
              return 'q';
          case 27:
              return 'r';
          case 28:
              return 's';
          case 29:
              return 't';
          case 30:
              return 'u';
          case 31:
              return 'v';
          case 32:
              return 'w';
          case 33:
              return 'x';
          case 34:
              return 'y';
          case 35:
              return 'z';
          default:
              return '.';       
      }//End of Switch
    }//End of codeList method
    
}
